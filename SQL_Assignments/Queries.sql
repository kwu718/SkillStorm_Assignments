
/*
Exercise 1 - Customer order count

Get order count per customer for the month of 2014 January.

Tables - orders and customers
Data should be sorted in descending order by count and ascending order by customer id.
Output should contain customer_id, customer_first_name, customer_last_name and customer_order_count.
*/

/*

OLD VERSION

SELECT customer_id, customer_fname, customer_lname, COUNT(1) as customer_order_count
FROM orders
LEFT JOIN customers ON customers.customer_id = orders.order_customer_id
WHERE order_date >= '2014-01-01' AND order_date <= '2014-01-30'
GROUP BY customer_id, customer_fname, customer_lname
ORDER BY customer_order_count DESC, customer_id;
*/

-- Uses LIKE
SELECT customer_id, customer_fname, customer_lname, COUNT(1) as customer_order_count
FROM orders
LEFT JOIN customers ON customers.customer_id = orders.order_customer_id
WHERE format(order_date, 'yyyy-MM') LIKE '2014-01%'
GROUP BY customer_id, customer_fname, customer_lname
ORDER BY customer_order_count DESC, customer_id;


/*
Exercise 2 - Dormant Customers

Get the customer details who have not placed any order for the month of 2014 January.

Tables - orders and customers
Data should be sorted in ascending order by customer_id
Output should contain all the fields from customers
*/
SELECT customer_id, customer_fname, customer_lname, customer_email, customer_password, customer_street, customer_state, customer_zipcode
FROM customers
WHERE NOT EXISTS(
    SELECT order_customer_id FROM orders
    WHERE customer_id = order_customer_id AND format(order_date, 'yyyy-MM') LIKE '2014-01%'
)
/*
Exercise 3 - Revenue Per Customer

Get the revenue generated by each customer for the month of 2014 January

Tables - orders, order_items and customers
Data should be sorted in descending order by revenue and then ascending order by customer_id
Output should contain customer_id, customer_first_name, customer_last_name, customer_revenue.
If there are no orders placed by customer, then the corresponding revenue for a give customer should be 0.
Consider only COMPLETE and CLOSED orders
*/

SELECT c.customer_id [Customer ID], c.customer_fname [First Name], c.customer_lname [Last Name], ROUND(COALESCE(sum(oi.order_item_subtotal), 0), 2) as [Customer Revenue]
FROM customers c LEFT JOIN(
orders o INNER JOIN order_items oi
ON o.order_id = oi.order_item_order_id AND 
format(o.order_date, 'yyyy-MM') LIKE '2014-01%'
AND (o.order_status = 'COMPLETE' OR o.order_status = 'CLOSED'))
ON c.customer_id = o.order_customer_id
GROUP BY c.customer_id, c.customer_fname, c.customer_lname
ORDER BY c.customer_id

/*
Exercise 4 - Revenue Per Category

Get the revenue generated for each category for the month of 2014 January

Tables - orders, order_items, products and categories
Data should be sorted in ascending order by category_id.
Output should contain all the fields from category along with the revenue as category_revenue.
Consider only COMPLETE and CLOSED orders
*/

SELECT c.category_id, c.category_department_id, c.category_name, ROUND(COALESCE(sum(oi.order_item_subtotal), 0), 2) as [Revenue Per Category]
FROM categories c
LEFT JOIN products p
INNER JOIN
orders o INNER JOIN 
order_items oi
ON order_id = order_item_order_id AND
format(o.order_date, 'yyyy-MM') LIKE '2014-01%'
AND (o.order_status = 'COMPLETE' OR o.order_status = 'CLOSED')
ON p.product_id = oi.order_item_product_id
ON c.category_id = p.product_category_id
GROUP BY c.category_id, c.category_department_id, c.category_name
ORDER BY c.category_id

/*
Exercise 5 - Product Count Per Department

Get the products for each department.

Tables - departments, categories, products
Data should be sorted in ascending order by department_id
Output should contain all the fields from department and the product count as product_count
*/

SELECT d.department_id as [Department ID], d.department_name[Department Name], COUNT(product_id) as [Product Count]
FROM departments d
LEFT JOIN
categories c
LEFT JOIN
products p
ON c.category_id = p.product_category_id
ON c.category_department_id = d.department_id
GROUP BY d.department_id, d.department_name



-- HELPER QUERIES USED TO CHECK MY ANSWERS
/*

SELECT category_department_id, COUNT(c.category_department_id)
FROM categories c
LEFT JOIN products p
ON c.category_id = p.product_category_id
GROUP BY c.category_department_id
ORDER BY c.category_department_id

SELECT * FROM categories c
LEFT JOIN
products p
ON c.category_id = p.product_category_id
ORDER BY c.category_department_id

SELECT * FROM products p
INNER JOIN
orders o 
INNER JOIN 
order_items oi
ON order_id = order_item_order_id AND
format(o.order_date, 'yyyy-MM') LIKE '2014-01%'
AND (o.order_status = 'COMPLETE' OR o.order_status = 'CLOSED')
ON oi.order_item_product_id  = p.product_id
ORDER BY p.product_category_id


SELECT * FROM 
orders o 
INNER JOIN 
order_items oi
ON order_id = order_item_order_id AND
format(o.order_date, 'yyyy-MM') LIKE '2014-01%'
AND (o.order_status = 'COMPLETE' OR o.order_status = 'CLOSED')

SELECT order_item_order_id, sum(order_item_subtotal)
FROM order_items
WHERE order_item_order_id = 29383 OR order_item_order_id = 22297 OR order_item_order_id = 9497
GROUP BY order_item_order_id
ORDER BY order_item_order_id DESC


SELECT * FROM orders
ORDER BY order_customer_id
SELECT * FROM customers
*/